---
import { config } from '../config';
import "@/styles/sidebar.css";

const base = import.meta.env.BASE_URL;

const mdBlogPostsGlob = import.meta.glob('../content/blogs/*.md', { eager: true });
const mdxBlogPostsGlob = import.meta.glob('../content/blogs/*.mdx', { eager: true });
const mdZongjinglusPostsGlob = import.meta.glob('../content/zongjinglus/*.md', { eager: true });
const mdxZongjinglusPostsGlob = import.meta.glob('../content/zongjinglus/*.mdx', { eager: true });
const mdKoansPostsGlob = import.meta.glob('../content/koans/*.md', { eager: true });
const mdxKoansPostsGlob = import.meta.glob('../content/koans/*.mdx', { eager: true });
const mdSutrasPostsGlob = import.meta.glob('../content/sutras/*.md', { eager: true });
const mdxSutrasPostsGlob = import.meta.glob('../content/sutras/*.mdx', { eager: true });
const mdInterpretationsPostsGlob = import.meta.glob('../content/interpretations/*.md', { eager: true });
const mdxInterpretationsPostsGlob = import.meta.glob('../content/interpretations/*.mdx', { eager: true });
const mdPracticesPostsGlob = import.meta.glob('../content/practices/*.md', { eager: true });
const mdxPracticesPostsGlob = import.meta.glob('../content/practices/*.mdx', { eager: true });
const mdPoemsPostsGlob = import.meta.glob('../content/poems/*.md', { eager: true });
const mdxPoemsPostsGlob = import.meta.glob('../content/poems/*.mdx', { eager: true });

const allPosts = [
    ...Object.values(mdBlogPostsGlob), ...Object.values(mdxBlogPostsGlob),
    ...Object.values(mdZongjinglusPostsGlob), ...Object.values(mdxZongjinglusPostsGlob),
    ...Object.values(mdKoansPostsGlob), ...Object.values(mdxKoansPostsGlob),
    ...Object.values(mdSutrasPostsGlob), ...Object.values(mdxSutrasPostsGlob),
    ...Object.values(mdInterpretationsPostsGlob), ...Object.values(mdxInterpretationsPostsGlob),
    ...Object.values(mdPracticesPostsGlob), ...Object.values(mdxPracticesPostsGlob),
    ...Object.values(mdPoemsPostsGlob), ...Object.values(mdxPoemsPostsGlob),
] as any[];

const recentPosts = allPosts
  .sort((a: any, b: any) => new Date(b.frontmatter.date).getTime() - new Date(a.frontmatter.date).getTime())
  .slice(0, 5);

const categories = [...new Set(allPosts.flatMap((post: any) => post.frontmatter.categories || []))];
const tags = [...new Set(allPosts.flatMap((post: any) => post.frontmatter.tags || []))];
---

<div class="sidebar-content">
  <!-- Bio Section -->
<!--  <section class="bio-section">
    <div class="avatar-container">
      {config.author.avatar ? (
        <img src={config.author.avatar} alt={config.author.name} class="avatar" />
      ) : (
        <div class="avatar-placeholder">
          <svg viewBox="0 0 80 80" fill="none" xmlns="http://www.w3.org/2000/svg">
            &lt;!&ndash; Circular mask to contain the silhouette &ndash;&gt;
            <defs>
              <clipPath id="circleClipSidebar">
                <circle cx="40" cy="40" r="39" />
              </clipPath>
            </defs>
            <g clip-path="url(#circleClipSidebar)">
              &lt;!&ndash; Head (oval shape) &ndash;&gt;
              <ellipse cx="40" cy="28" rx="13" ry="15" fill="currentColor"/>
              &lt;!&ndash; Neck &ndash;&gt;
              <path d="M33 40 Q33 44 35 46 L45 46 Q47 44 47 40 Z" fill="currentColor"/>
              &lt;!&ndash; Shoulders &ndash;&gt;
              <path d="M35 46 Q28 48 22 54 Q16 60 14 70 L14 80 L66 80 L66 70 Q64 60 58 54 Q52 48 45 46 Z" fill="currentColor"/>
            </g>
          </svg>
        </div>
      )}
    </div>
    <h3 class="author-name">{config.author.name}</h3>
    <p class="bio-text">{config.author.bio}</p>
  </section>-->

  <!-- Recent Blog Posts Section -->
  {recentPosts.length > 0 && (
    <section class="recent-posts">
      <h3 class="section-title">Recent Blog Posts</h3>
      <ul class="post-list">
        {recentPosts.map(post => (
          <li class="post-item">
            <a href={`${base}/blogs/${post.file.split('/').pop()?.replace(/\.(md|mdx)$/, '')}`} class="post-link">
              {post.frontmatter.title}
            </a>
            <time class="post-date" datetime={post.frontmatter.date}>
              {new Date(post.frontmatter.date).toLocaleDateString('en-US', {
                month: 'short',
                day: 'numeric',
                year: 'numeric'
              })}
            </time>
          </li>
        ))}
      </ul>
    </section>
  )}

  <!-- Categories Section -->
  {categories.length > 0 && (
    <section class="categories">
      <h3 class="section-title">Categories</h3>
      <ul class="category-list">
        {categories.map(category => (
          <li class="category-item">
            <a href={`${base}/categories/${category.toLowerCase()}`} class="category-link">
              {category}
            </a>
          </li>
        ))}
      </ul>
    </section>
  )}

  <!-- Tags Section -->
  {tags.length > 0 && (
    <section class="categories">
      <h3 class="section-title">Tags</h3>
      <ul class="category-list">
        {tags.map(tag => (
          <li class="category-item">
            <a href={`${base}/tags/${tag.toLowerCase()}`} class="category-link">
              {tag}
            </a>
          </li>
        ))}
      </ul>
    </section>
  )}
</div>

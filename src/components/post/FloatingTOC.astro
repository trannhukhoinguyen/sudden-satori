---
import type { Heading } from '../../utils/table-of-contents';
import { extractHeadings, filterHeadingsForTOC } from '../../utils/table-of-contents';

const { post } = Astro.props;

// Only include h2 headings
const rawContent = post.body || post.rawContent?.() || "";
const allHeadings = extractHeadings(rawContent);
const headings: Heading[] = filterHeadingsForTOC(allHeadings);
const tocHeadings: Heading[] = headings;
const tocHeadingsH2: Heading[] = headings.filter(h => h.depth === 2);
---

{tocHeadingsH2.length > 0 && (
    <aside class="floating-toc" aria-label="Table of contents">
            <div class="floating-toc__inner">
                <div class="floating-toc__header">Nội dung</div>
                <nav class="floating-toc__nav">
                    {tocHeadingsH2.map((heading) => (
                            <a
                                href={`#${heading.slug}`}
                                class={`floating-toc__link floating-toc__link--level-${heading.depth}`}
                                data-level={heading.depth}
                            >
                                <span class="floating-toc__text">{heading.text}</span>
                            </a>
                    ))}
                </nav>
            </div>
    </aside>
)}

<style>
/* TOC PC */

    /* Hide on mobile and tablets */
    @media (max-width: 1400px) {
        .floating-toc {
            display: none;
        }
    }

    .floating-toc {
        position: fixed;
        top: 50%;
        right: 2rem;
        transform: translateY(-50%);
        width: 220px;
        max-height: 70vh;
        z-index: 10;
    }

    .floating-toc__inner {
        padding: 1.5rem 0;
        overflow-y: auto;
        max-height: 70vh;

        /* Subtle scrollbar */
        scrollbar-width: thin;
        scrollbar-color: var(--color-border) transparent;
    }

    .floating-toc__inner::-webkit-scrollbar {
        width: 4px;
    }

    .floating-toc__inner::-webkit-scrollbar-track {
        background: transparent;
    }

    .floating-toc__inner::-webkit-scrollbar-thumb {
        background-color: var(--color-border);
        border-radius: 2px;
    }

    .floating-toc__header {
        font-size: 0.75rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.1em;
        color: var(--color-text-primary);
        opacity: 0.5;
        margin-bottom: 1rem;
        padding-left: 1rem;
    }

    .floating-toc__nav {
        display: flex;
        flex-direction: column;
        gap: 0.125rem;
    }

    .floating-toc__link {
        display: block;
        padding: 0.375rem 1rem;
        color: var(--color-text-primary);
        text-decoration: none;
        font-size: 0.875rem;
        line-height: 1.4;
        opacity: 0.6;
        transition: all 0.2s ease;
        border-left: 2px solid transparent;
        position: relative;
    }

    .floating-toc__link:hover {
        opacity: 1;
        color: var(--color-text-primary);
    }

    .floating-toc__link.active {
        opacity: 1;
        color: var(--color-text-primary);
        border-left-color: var(--color-border);
        background: linear-gradient(to right, rgba(0,0,0,0.02), transparent);
    }

    /* Dark mode gradient adjustment */
    @media (prefers-color-scheme: dark) {
        .floating-toc__link.active {
            background: linear-gradient(to right, rgba(255,255,255,0.02), transparent);
        }
    }

    /* Text truncation for long headings */
    .floating-toc__text {
        display: block;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    /* Smooth fade in animation */
    .floating-toc {
        animation: fadeIn 0.3s ease-out;
    }

    @keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(-50%) translateX(10px);
        }
        to {
            opacity: 1;
            transform: translateY(-50%) translateX(0);
        }
    }

    /* For very large screens, position relative to content */
    @media (min-width: 1600px) {
        .floating-toc {
            right: calc((100vw - 1200px) / 2 - 280px);
            max-width: 250px;
        }
    }

    @media (min-width: 1920px) {
        .floating-toc {
            right: calc((100vw - 1200px) / 2 - 320px);
        }
    }
</style>

{tocHeadingsH2.length > 0 && (
    <!-- Toggle button for mobile -->
    <button class="toc-toggle" aria-label="Mở mục lục">
        ➤
    </button>

    <aside class="floating-toc-mobile" aria-label="Table of contents">
        <div class="floating-toc-mobile__inner">
            <div class="floating-toc-mobile__header">Nội dung</div>
            <nav class="floating-toc-mobile__nav">
                {tocHeadingsH2.map((heading) => (
                        <a
                                href={`#${heading.slug}`}
                                class={`floating-toc-mobile__link floating-toc-mobile__link--level-${heading.depth}`}
                                data-level={heading.depth}
                        >
                            <span class="floating-toc-mobile__text">{heading.text}</span>
                        </a>
                ))}
            </nav>
        </div>
    </aside>
)}

<style>
/* TOC MOBILE */

    /* Toggle button (mobile only) */
    .toc-toggle {
        position: fixed;
        top: 50%;
        right: 3rem;
        z-index: 20;
        color: var(--color-text-toc);
        background: var(--color-background-toc);
        border: 1px solid var(--color-border);
        border-radius: 50%;
        width: 40px;
        height: 40px;
        display: none;
        align-items: center;
        justify-content: center;
    }

    .floating-toc-mobile {
        display: block;
        position: fixed;
        top: 0;
        right: -100%;
        width: 80%;
        max-width: 300px;
        height: 100vh;
        color: var(--color-text-toc);
        background: var(--color-background-toc);
        box-shadow: -2px 0 6px rgba(0,0,0,0.15);
        transition: right 0.3s ease;
        z-index: 15;
        padding: 1rem;
    }

    .floating-toc-mobile.open {
        right: 0;
    }

    .floating-toc-mobile__inner {
        padding: 1.5rem 0;
        overflow-y: auto;
        max-height: 70vh;

        /* Subtle scrollbar */
        scrollbar-width: thin;
        scrollbar-color: var(--color-border) transparent;
    }

    .floating-toc-mobile__inner::-webkit-scrollbar {
        width: 4px;
    }

    .floating-toc-mobile__inner::-webkit-scrollbar-track {
        background: transparent;
    }

    .floating-toc-mobile__inner::-webkit-scrollbar-thumb {
        background-color: var(--color-border);
        border-radius: 2px;
    }

    .floating-toc-mobile__header {
        font-size: 0.75rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.1em;
        color: var(--color-text-toc);
        opacity: 0.5;
        margin-bottom: 1rem;
        padding-left: 1rem;
    }

    .floating-toc-mobile__nav {
        display: flex;
        flex-direction: column;
        gap: 0.125rem;
    }

    .floating-toc-mobile__link {
        display: block;
        padding: 0.375rem 1rem;
        color: var(--color-text-toc);
        text-decoration: none;
        font-size: 0.875rem;
        line-height: 1.4;
        opacity: 0.6;
        transition: all 0.2s ease;
        border-left: 2px solid transparent;
        position: relative;
    }

    .floating-toc-mobile__link:hover {
        opacity: 1;
        color: var(--color-text-toc);
    }

    .floating-toc-mobile__link.active {
        opacity: 1;
        color: var(--color-text-toc);
        border-left-color: var(--color-border);
        background: linear-gradient(to right, rgba(0,0,0,0.02), transparent);
    }

    /* Dark mode gradient adjustment */
    @media (prefers-color-scheme: dark) {
        .floating-toc-mobile__link.active {
            background: linear-gradient(to right, rgba(255,255,255,0.02), transparent);
        }
    }

    /* Text truncation for long headings */
    .floating-toc-mobile__text {
        display: block;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    /* Smooth fade in animation */
    .floating-toc-mobile {
        animation: fadeIn 0.3s ease-out;
    }

    /* Show toggle only on small screens */
    @media (max-width: 1400px) {
        .toc-toggle, .floating-toc-mobile  {
            display: block; // flex
        }
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const toc = document.querySelector('.floating-toc');
        if (!toc) return;

        const links = toc.querySelectorAll('.floating-toc__link');
        const headings = Array.from(links).map(link => {
            const id = link.getAttribute('href').slice(1);
            return document.getElementById(id);
        }).filter(Boolean);

        // Smooth scrolling with offset
        links.forEach(link => {
            link.addEventListener('click', (e) => {
                e.preventDefault();
                const targetId = link.getAttribute('href').slice(1);
                const targetElement = document.getElementById(targetId);

                if (targetElement) {
                    const offset = 100;
                    const targetPosition = targetElement.offsetTop - offset;

                    window.scrollTo({
                        top: targetPosition,
                        behavior: 'smooth'
                    });

                    history.pushState(null, null, `#${targetId}`);
                }
            });
        });

        // Intersection Observer for active state
        const observerOptions = {
            rootMargin: '-100px 0px -70% 0px',
            threshold: 0
        };

        const activeClass = 'active';
        let currentActiveLink = null;

        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                const id = entry.target.getAttribute('id');
                const correspondingLink = toc.querySelector(`[href="#${id}"]`);

                if (entry.isIntersecting) {
                    // Remove active class from previous link
                    if (currentActiveLink && currentActiveLink !== correspondingLink) {
                        currentActiveLink.classList.remove(activeClass);
                    }

                    // Add active class to current link
                    if (correspondingLink) {
                        correspondingLink.classList.add(activeClass);
                        currentActiveLink = correspondingLink;
                    }
                }
            });
        }, observerOptions);

        // Observe all headings
        headings.forEach(heading => {
            if (heading) observer.observe(heading);
        });

        // Set initial active state based on scroll position
        const setInitialActive = () => {
            const scrollPosition = window.scrollY + 150;

            for (let i = headings.length - 1; i >= 0; i--) {
                if (headings[i] && scrollPosition >= headings[i].offsetTop) {
                    links[i].classList.add(activeClass);
                    currentActiveLink = links[i];
                    break;
                }
            }
        };

        setInitialActive();
    });

    document.addEventListener("DOMContentLoaded", () => {
        const btn = document.querySelector(".toc-toggle");
        const toc = document.querySelector(".floating-toc-mobile");
        if (!btn || !toc) return;

        btn.addEventListener("click", () => {
            toc.classList.toggle("open");
        });
    });
</script>

---
let Readability;

if (import.meta.env.SSR) {
    const mod = await import("@mozilla/readability");
    Readability = mod.Readability;
}

const { pdfUrl = "", title } = Astro.props;
const isPdf = pdfUrl.toLowerCase().endsWith(".pdf");
---

<style>
    .doc-modal-overlay { position: fixed; inset: 0; background: rgba(0,0,0,0.6); display: flex; justify-content: center; align-items: center; z-index: 1000; }
    .doc-modal { background: white; border-radius: 8px; width: 90%; max-width: 900px; height: 90%; display: flex; flex-direction: column; }
    .doc-modal-header { display: flex; justify-content: space-between; padding: 0.5rem 1rem; border-bottom: 1px solid #ddd; }
    .doc-modal-content { flex: 1; overflow: auto; padding: 1rem; }
    iframe { flex: 1; border: none; }
</style>

<button id="doc-trigger" title={title}>üìë</button>

<div class="doc-modal-overlay" id="doc-modal" style="display:none;">
    <div class="doc-modal">
        <div class="doc-modal-header">
            <span>Xem <b>{title}</b></span>
            <div>
                <a href={pdfUrl} target="_blank" rel="noopener">
                    <button>M·ªü tab m·ªõi</button>
                </a>
                {isPdf && (
                        <>
                            <a href={pdfUrl} download><button>T·∫£i v·ªÅ</button></a>
                            <button id="doc-print">In</button>
                        </>
                )}
                <button id="doc-close">‚úñ</button>
            </div>
        </div>

        {isPdf ? (
                <iframe src={pdfUrl}></iframe>
        ) : (
                <div class="doc-modal-content" id="doc-content">‚è≥ ƒêang t·∫£i...</div>
        )}
    </div>
</div>

<script>
    import { Readability } from "@mozilla/readability";

    const trigger = document.getElementById("doc-trigger");
    const modal = document.getElementById("doc-modal");
    const closeBtn = document.getElementById("doc-close");
    const contentDiv = document.getElementById("doc-content");
    const printBtn = document.getElementById("doc-print");

    trigger?.addEventListener("click", async () => {
        modal.style.display = "flex";

        if (contentDiv) {
            try {
                const res = await fetch("{{pdfUrl}}");
                const html = await res.text();
                const doc = new DOMParser().parseFromString(html, "text/html");
                const reader = new Readability(doc);
                const article = reader.parse();
                contentDiv.innerHTML = article?.content || "<p>Kh√¥ng th·ªÉ tr√≠ch xu·∫•t n·ªôi dung</p>";
            } catch (err) {
                contentDiv.innerHTML = "<p>L·ªói khi t·∫£i n·ªôi dung</p>";
            }
        }
    });

    closeBtn?.addEventListener("click", () => modal.style.display = "none");
    modal?.addEventListener("click", (e) => { if (e.target === modal) modal.style.display = "none"; });

    printBtn?.addEventListener("click", () => {
        const iframe = document.querySelector("#doc-modal iframe");
        if (iframe instanceof HTMLIFrameElement) {
            iframe.contentWindow?.print();
        } else {
            window.print(); // fallback n·∫øu l√† article text
        }
    });
</script>

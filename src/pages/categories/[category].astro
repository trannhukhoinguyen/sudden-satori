---
import Layout from '../../layouts/Layout.astro';

export async function getStaticPaths() {
  const allCategories = new Set<string>();

  // Blog posts
  const postsBlogGlob = import.meta.glob('../../content/blogs/*.md', { eager: true });
  const allBlogPosts = Object.values(postsBlogGlob) as any[];
  allBlogPosts.forEach((post: any) => {
    if (post.frontmatter.categories) {
      post.frontmatter.categories.forEach((category: string) => {
        allCategories.add(category);
      });
      post.frontmatter.group = "blogs";
    }
  });

  // Interpretation posts
  const postsInterpretationGlob = import.meta.glob('../../content/interpretations/*.md', { eager: true });
  const allInterpretationPosts = Object.values(postsInterpretationGlob) as any[];
  allInterpretationPosts.forEach((post: any) => {
    if (post.frontmatter.categories) {
      post.frontmatter.categories.forEach((category: string) => {
        allCategories.add(category);
      });
      post.frontmatter.group = "interpretations";
    }
  });

  // Koan posts
  const postsKoanGlob = import.meta.glob('../../content/koans/*.md', { eager: true });
  const allKoanPosts = Object.values(postsKoanGlob) as any[];
  allKoanPosts.forEach((post: any) => {
    if (post.frontmatter.categories) {
      post.frontmatter.categories.forEach((category: string) => {
        allCategories.add(category);
      });
      post.frontmatter.group = "koans";
    }
  });

  // Poem posts
  const postsPoemGlob = import.meta.glob('../../content/poems/*.md', { eager: true });
  const allPoemPosts = Object.values(postsPoemGlob) as any[];
  allPoemPosts.forEach((post: any) => {
    if (post.frontmatter.categories) {
      post.frontmatter.categories.forEach((category: string) => {
        allCategories.add(category);
      });
      post.frontmatter.group = "poems";
    }
  });

  // Sutra posts
  const postsSutraGlob = import.meta.glob('../../content/sutras/*.md', { eager: true });
  const allSutraPosts = Object.values(postsSutraGlob) as any[];
  allSutraPosts.forEach((post: any) => {
    if (post.frontmatter.categories) {
      post.frontmatter.categories.forEach((category: string) => {
        allCategories.add(category);
      });
      post.frontmatter.group = "sutras";
    }
  });

  // Zongjinglu posts
  const postsZongjingluGlob = import.meta.glob('../../content/zongjinglus/*.md', { eager: true });
  const allZongjingluPosts = Object.values(postsZongjingluGlob) as any[];
  allZongjingluPosts.forEach((post: any) => {
    if (post.frontmatter.categories) {
      post.frontmatter.categories.forEach((category: string) => {
        allCategories.add(category);
      });
      post.frontmatter.group = "zongjinglus";
    }
  });

  // Create paths for each category
  const allPosts = [
      ...allBlogPosts,
      ...allInterpretationPosts,
      ...allKoanPosts,
      ...allPoemPosts,
      ...allSutraPosts,
      ...allZongjingluPosts,
  ];
  return Array.from(allCategories).map((category: string) => {
    const categorySlug = category.toLowerCase().replace(/[\/\s]+/g, '-');
    const postsInCategory = allPosts.filter((post: any) =>
      post.frontmatter.categories && post.frontmatter.categories.includes(category)
    ).sort((a: any, b: any) => new Date(b.frontmatter.date).getTime() - new Date(a.frontmatter.date).getTime());

    return {
      params: { category: categorySlug },
      props: {
        category,
        posts: postsInCategory
      }
    };
  });
}

const { category, posts } = Astro.props;
const base = import.meta.env.BASE_URL;
const title = "Categories";
const titleFull = category + " | Sudden Satori";
const path = "categories";
const description = `Tất cả bài viết về ${category}`;
---

<Layout title={titleFull} description={description}>
  <div class="category-page">
    <header class="page-header">
      <h1 class="page-title">{category}</h1>
      <p class="page-description">
        {posts.length} article{posts.length === 1 ? '' : 's'} in this category
      </p>
      <hr class="page-rule" />
    </header>

    <div class="posts-list">
      {posts.map((post: any) => (
        <article class="post-item">
          <h2 class="post-title">
            <a href={`${base}${post.frontmatter.group}/${post.file.split('/').pop()?.replace('.md', '')}`}>
              {post.frontmatter.title}
            </a>
          </h2>

          <div class="post-meta">
            <time class="post-date" datetime={post.frontmatter.date}>
              {new Date(post.frontmatter.date).toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
              })}
            </time>
          </div>

          {post.frontmatter.excerpt && (
            <p class="post-excerpt">{post.frontmatter.excerpt}</p>
          )}

          <a href={`${base}${post.frontmatter.group}/${post.file.split('/').pop()?.replace('.md', '')}`} class="read-more">
            Read More →
          </a>
        </article>
      ))}
    </div>

    <div class="page-navigation">
      <a href={`${base}${path}`} class="back-link">← Xem Tất cả {title}</a>
    </div>
  </div>
</Layout>

<style>
  .category-page {
    max-width: 800px;
    margin: 0 auto;
  }

  .page-header {
    text-align: center;
    margin-bottom: calc(var(--grid-unit) * 8);
  }

  .page-title {
    font-family: var(--font-heading-primary),serif;
    font-size: 3.5rem;
    font-weight: 900;
    color: var(--color-accent);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    line-height: 1.1;
    margin-bottom: calc(var(--grid-unit) * 3);
  }

  .page-description {
    font-size: 1.125rem;
    line-height: 1.6;
    color: var(--color-text-secondary);
    margin-bottom: calc(var(--grid-unit) * 4);
  }

  .page-rule {
    height: 4px;
    background-color: var(--color-accent);
    border: none;
    width: 120px;
    margin: 0 auto;
  }

  .posts-list {
    display: flex;
    flex-direction: column;
    gap: calc(var(--grid-unit) * 6);
    margin-bottom: calc(var(--grid-unit) * 8);
  }

  .post-item {
    border-bottom: 1px solid var(--color-border);
    padding-bottom: calc(var(--grid-unit) * 4);
  }

  .post-item:last-child {
    border-bottom: none;
    padding-bottom: 0;
  }

  .post-title {
    font-family: var(--font-heading-secondary),serif;
    font-size: 2rem;
    font-weight: 700;
    margin-bottom: calc(var(--grid-unit) * 2);
  }

  .post-title a {
    color: var(--color-text-primary);
    text-decoration: none;
    transition: color 0.2s ease;
  }

  .post-title a:hover,
  .post-title a:focus {
    color: var(--color-accent);
  }

  .post-meta {
    margin-bottom: calc(var(--grid-unit) * 2);
  }

  .post-date {
    font-family: var(--font-mono),serif;
    font-size: 0.9rem;
    color: var(--color-text-muted);
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .post-excerpt {
    color: var(--color-text-secondary);
    line-height: 1.6;
    margin-bottom: calc(var(--grid-unit) * 2);
    font-size: 1.1rem;
  }

  .read-more {
    font-family: var(--font-heading-secondary),serif;
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    color: var(--color-accent);
    text-decoration: none;
    font-size: 0.9rem;
    transition: color 0.2s ease;
  }

  .read-more:hover,
  .read-more:focus {
    color: var(--color-text-primary);
  }

  .page-navigation {
    text-align: center;
    padding-top: calc(var(--grid-unit) * 4);
    border-top: 1px solid var(--color-border);
  }

  .back-link {
    font-family: var(--font-heading-secondary),serif;
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    color: var(--color-accent);
    padding: calc(var(--grid-unit)) calc(var(--grid-unit) * 2);
    border: 2px solid var(--color-accent);
    border-radius: 4px;
    transition: all 0.2s ease;
    display: inline-block;
  }

  .back-link:hover,
  .back-link:focus {
    background-color: var(--color-accent);
    color: white;
    text-decoration: none;
  }

  @media (max-width: 768px) {
    .page-title {
      font-size: 2.5rem;
    }

    .post-title {
      font-size: 1.75rem;
    }
  }
</style>

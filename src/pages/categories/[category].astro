---
import Layout from '../../layouts/Layout.astro';
import "@/styles/category.css";
import {
  CONTENT_MAP
} from "../../utils/getMarkdownContent";

/*export async function getStaticPaths() {
  const allCategories = getSortedTermsByType(allPosts, "categories");
  return Array.from(allCategories).map((category: string) => {
    const categorySlug = category.toLowerCase().replace(/[\/\s]+/g, '-');
    const postsInCategory = allPosts.filter((post: any) =>
      post.frontmatter.categories && post.frontmatter.categories.includes(category)
    ).sort((a: any, b: any) => new Date(b.frontmatter.date).getTime() - new Date(a.frontmatter.date).getTime());

    return {
      params: { category: categorySlug },
      props: {
        category,
        posts: postsInCategory
      }
    };
  });
}*/
export async function getStaticPaths() {
  // 1. T·∫°o path cho categories th·∫≠t
  const categoryPaths = Object.entries(CONTENT_MAP).flatMap(([collection, data]) =>
      data.categories.map(([category, posts]) => {
        const categorySlug = category.toLowerCase().replace(/[\/\s]+/g, '-');
        return {
          params: { category: categorySlug },
          props: {
            mode: "category", // ‚úÖ ph√¢n bi·ªát mode
            category,
            posts,
            collection
          },
        };
      })
  );

  // 2. T·∫°o path cho collection name (blogs, books, sutras‚Ä¶)
  const collectionPaths = Object.entries(CONTENT_MAP).map(([collection, data]) => ({
    params: { category: collection }, // ‚úÖ reuse param "category"
    props: {
      mode: "collection",
      category: collection,
      posts: data.posts,
      collection,
    },
  }));

  return [...categoryPaths, ...collectionPaths];
}

const { mode, category, posts, collection } = Astro.props;
const base = import.meta.env.BASE_URL;

const description =
    mode === "category"
        ? `T·∫•t c·∫£ b√†i vi·∫øt v·ªÅ ${category} trong ${collection}`
        : `T·∫•t c·∫£ b√†i vi·∫øt trong collection ${collection}`;
---

<Layout title={tag} description={description}>
  <div class="tag-page">
    <header class="page-header">
      <h1 class="page-title">
        {mode === "tag" ? `Tag: ${tag}` : `Tags trong ${collection}`}
      </h1>
      <p class="page-description">
        {mode === "tag"
            ? `${posts.length} b√†i vi·∫øt trong tag n√†y`
            : `${tags.length} tags trong collection ${collection}`}
      </p>
      <hr class="page-rule" />
    </header>

    {mode === "tag" ? (
        // üëâ Tr∆∞·ªùng h·ª£p tag th·∫≠t ‚Üí list b√†i vi·∫øt
      <div class="posts-list">
          {posts.map((post: any) => {
            const slug = post.file.split('/').pop()?.replace(/\.(md|mdx)$/, '');
            return (
                <article class="post-item">
                  <h2 class="post-title">
                    <a href={`${base}${post.frontmatter.type}/${slug}`}>
                      {post.frontmatter.title}
                    </a>
                  </h2>

                  <div class="post-meta">
                    <time
                        class="post-date"
                        datetime={new Date(post.frontmatter.date).toISOString()}
                    >
                      {new Date(post.frontmatter.date).toLocaleDateString("vi-VN", {
                        year: "numeric",
                        month: "long",
                        day: "numeric",
                      })}
                    </time>
                  </div>

                  {post.frontmatter.excerpt && (
                      <p class="post-excerpt">{post.frontmatter.excerpt}</p>
                  )}

                  <a href={`${base}${post.frontmatter.type}/${slug}`} class="read-more">
                    ƒê·ªçc ti·∫øp ‚Üí
                  </a>
                </article>
            );
          })}
        </div>
    ) : (
        // üëâ Tr∆∞·ªùng h·ª£p collection ‚Üí list to√†n b·ªô tags trong collection
      <div class="tags-list">
          {tags.map(([tagName, posts]) => {
            const tagSlug = tagName.toLowerCase().replace(/[\/\s]+/g, '-');
            return (
                <div class="tag-item">
                  <a href={`${base}tags/${tagSlug}`} class="tag-link">
                    {tagName} ({posts.length})
                  </a>
                </div>
            );
          })}
        </div>
    )}

    <div class="page-navigation">
      <a href={`${base}/${mode === "tag" ? `${collection}/tags` : collection}`} class="back-link">
        ‚Üê Quay l·∫°i {mode === "tag" ? "t·∫•t c·∫£ Tags" : "Collection"}
      </a>
    </div>
  </div>
</Layout>

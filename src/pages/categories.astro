---
import Layout from '../layouts/Layout.astro';

const base = import.meta.env.BASE_URL;
const title = "Categories";
const path = "categories";
const titleFull = title + " | Sudden Satori";
const description = "Xem " + title;

const allCategories = new Set<string>();
const categoryMap: Record<string, any[]> = {};

// Blog posts
const postsBlogGlobMd = import.meta.glob('../content/blogs/*.md', { eager: true });
const postsBlogGlobMdx = import.meta.glob('../content/blogs/*.mdx', { eager: true });
const allBlogPostsMd = Object.values(postsBlogGlobMd) as any[];
const allBlogPostsMdx = Object.values(postsBlogGlobMdx) as any[];
const allBlogPosts = allBlogPostsMd.concat(allBlogPostsMdx);
allBlogPosts.forEach((post: any) => {
  if (post.frontmatter.categories) {
    post.frontmatter.categories.forEach((category: string) => {
      allCategories.add(category);
    });
    post.frontmatter.group = "blogs";
  }
});

// Interpretation posts
const postsInterpretationGlobMd = import.meta.glob('../content/interpretations/*.md', { eager: true });
const postsInterpretationGlobMdx = import.meta.glob('../content/interpretations/*.mdx', { eager: true });
const allInterpretationPostsMd = Object.values(postsInterpretationGlobMd) as any[];
const allInterpretationPostsMdx = Object.values(postsInterpretationGlobMdx) as any[];
const allInterpretationPosts = allInterpretationPostsMd.concat(allInterpretationPostsMdx);
allInterpretationPosts.forEach((post: any) => {
  if (post.frontmatter.categories) {
    post.frontmatter.categories.forEach((category: string) => {
      allCategories.add(category);
    });
    post.frontmatter.group = "interpretations";
  }
});

// Koan posts
const postsKoanGlobMd = import.meta.glob('../content/koans/*.md', { eager: true });
const postsKoanGlobMdx = import.meta.glob('../content/koans/*.mdx', { eager: true });
const allKoanPostsMd = Object.values(postsKoanGlobMd) as any[];
const allKoanPostsMdx = Object.values(postsKoanGlobMdx) as any[];
const allKoanPosts = allKoanPostsMd.concat(allKoanPostsMdx);
allKoanPosts.forEach((post: any) => {
  if (post.frontmatter.categories) {
    post.frontmatter.categories.forEach((category: string) => {
      allCategories.add(category);
    });
    post.frontmatter.group = "koans";
  }
});

// Poem posts
const postsPoemGlobMd = import.meta.glob('../content/poems/*.md', { eager: true });
const postsPoemGlobMdx = import.meta.glob('../content/poems/*.mdx', { eager: true });
const allPoemPostsMd = Object.values(postsPoemGlobMd) as any[];
const allPoemPostsMdx = Object.values(postsPoemGlobMdx) as any[];
const allPoemPosts = allPoemPostsMd.concat(allPoemPostsMdx);
allPoemPosts.forEach((post: any) => {
  if (post.frontmatter.categories) {
    post.frontmatter.categories.forEach((category: string) => {
      allCategories.add(category);
    });
    post.frontmatter.group = "poems";
  }
});

// Sutra posts
const postsSutraGlobMd = import.meta.glob('../content/sutras/*.md', { eager: true });
const postsSutraGlobMdx = import.meta.glob('../content/sutras/*.mdx', { eager: true });
const allSutraPostsMd = Object.values(postsSutraGlobMd) as any[];
const allSutraPostsMdx = Object.values(postsSutraGlobMdx) as any[];
const allSutraPosts = allSutraPostsMd.concat(allSutraPostsMdx);
allSutraPosts.forEach((post: any) => {
  if (post.frontmatter.categories) {
    post.frontmatter.categories.forEach((category: string) => {
      allCategories.add(category);
    });
    post.frontmatter.group = "sutras";
  }
});

// Zongjinglu posts
const postsZongjingluGlobMd = import.meta.glob('../content/zongjinglus/*.md', { eager: true });
const postsZongjingluGlobMdx = import.meta.glob('../content/zongjinglus/*.mdx', { eager: true });
const allZongjingluPostsMd = Object.values(postsZongjingluGlobMd) as any[];
const allZongjingluPostsMdx = Object.values(postsZongjingluGlobMdx) as any[];
const allZongjingluPosts = allZongjingluPostsMd.concat(allZongjingluPostsMdx);
allZongjingluPosts.forEach((post: any) => {
  if (post.frontmatter.categories) {
    post.frontmatter.categories.forEach((category: string) => {
      allCategories.add(category);
    });
    post.frontmatter.group = "zongjinglus";
  }
});

// Create paths for each category
const allPosts = [
  ...allBlogPosts,
  ...allInterpretationPosts,
  ...allKoanPosts,
  ...allPoemPosts,
  ...allSutraPosts,
  ...allZongjingluPosts,
];

// Create category map with post counts
Array.from(allCategories).forEach((category: string) => {
  categoryMap[category] = allPosts.filter((post: any) =>
    post.frontmatter.categories && post.frontmatter.categories.includes(category)
  );
});

// Sort categories by post count (descending) then alphabetically
const sortedCategories = Object.entries(categoryMap)
  .sort((a: any, b: any) => {
    if (b[1].length !== a[1].length) {
      return b[1].length - a[1].length;
    }
    return a[0].localeCompare(b[0]);
  });
---

<Layout title={titleFull} description={description} showSidebar={true}>
  <div class="categories-page">
    <header class="page-header">
      <h1 class="page-title">{title}</h1>
      <p class="page-description">{description}</p>
      <hr class="page-rule" />
    </header>

    <div class="categories-grid">
      {sortedCategories.map(([category, posts]: [string, any[]]) => (
        <div class="category-card">
          <a href={`${base}${path}/${category.toLowerCase().replace(/[\/\s]+/g, '-')}`} class="category-link">
            <h2 class="category-title">{category}</h2>
            <p class="category-count">
              {posts.length} article{posts.length === 1 ? '' : 's'}
            </p>
          </a>
        </div>
      ))}
    </div>

    {sortedCategories.length === 0 && (
      <div class="no-categories">
        <p>No categories found.</p>
      </div>
    )}
  </div>
</Layout>

<style>
  .categories-page {
    max-width: 100%;
  }

  .page-header {
    text-align: center;
    margin-bottom: calc(var(--grid-unit) * 6);
  }

  .page-title {
    font-family: var(--font-heading-primary),serif;
    font-size: 3rem;
    font-weight: 700;
    color: var(--color-accent);
    text-transform: uppercase;
    letter-spacing: 0.15em;
    margin-bottom: calc(var(--grid-unit) * 2);
  }

  .page-description {
    font-size: 1.125rem;
    line-height: 1.6;
    color: var(--color-text-secondary);
    max-width: 600px;
    margin: 0 auto calc(var(--grid-unit) * 3);
  }

  .page-rule {
    height: 4px;
    background-color: var(--color-accent);
    border: none;
    width: 120px;
    margin: 0 auto;
  }

  .categories-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: calc(var(--grid-unit) * 2);
  }

  .category-card {
    background-color: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 6px;
    transition: transform 0.2s ease, border-color 0.2s ease, box-shadow 0.2s ease;
    overflow: hidden;
  }

  .category-card:hover {
    transform: translateY(-2px);
    border-color: var(--color-accent);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  .category-link {
    display: block;
    padding: calc(var(--grid-unit) * 2);
    text-decoration: none;
    color: inherit;
  }

  .category-title {
    font-family: var(--font-heading-secondary),serif;
    font-size: 1.1rem;
    font-weight: 700;
    margin-bottom: calc(var(--grid-unit) / 2);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    color: var(--color-text-primary);
    transition: color 0.2s ease;
  }

  .category-link:hover .category-title {
    color: var(--color-accent);
  }

  .category-count {
    font-family: var(--font-mono),serif;
    font-size: 0.75rem;
    color: var(--color-text-muted);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    margin: 0;
  }

  .no-categories {
    text-align: center;
    padding: calc(var(--grid-unit) * 6);
    color: var(--color-text-muted);
    font-style: italic;
  }

  @media (max-width: 768px) {
    .page-title {
      font-size: 2.5rem;
    }

    .categories-grid {
      grid-template-columns: 1fr;
    }
  }
</style>

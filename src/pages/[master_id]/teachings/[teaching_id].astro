---
import type { CollectionEntry } from "astro:content";
import { getCollection, render, getEntry } from "astro:content";
import BaseLayout from "../../../layouts/BaseLayout.astro";
import Separator from "../../../components/Separator.astro";

export const getStaticPaths = async () => {
  // Fetch all teachings from the 'teachings' collection
  const teachings = await getCollection("teachings");

  /*
  // Filter teachings to ensure each has valid master data, then map to generate paths
  const paths = teachings.filter(teaching => teaching.data.master && teaching.data.master.id) // Ensure the teaching has a valid master reference
  .map((teaching) => {
    return {
      params: {
        master_id: teaching.data.master.id, // Include master ID in the route parameters
        teaching_id: teaching.id,             // Include teaching ID in the route parameters
      },
      props: {
        master: teaching.data.master,      // Pass the master data as props
        teaching                           // Pass the teaching data as props
      },
    };
  });
  */

  const paths = await Promise.all(
    teachings.map(async (teaching) => {
      const master = await getEntry("masters", teaching.data.master.id); // Fetch master by ID
      return {
        params: {
          master_id: teaching.data.master.id, // Include master ID in route parameters
          teaching_id: teaching.id, // Include teaching ID in route parameters
        },
        props: {
          master, // Pass full master data as props
          teaching, // Pass teaching data as props
        },
      };
    }),
  );

  // Return the generated paths for static page generation
  return paths;
};

type Props = {
  master: CollectionEntry<"masters">; // The master associated with the teaching
  teaching: CollectionEntry<"teachings">; // The teaching being rendered
};

const { master, teaching } = Astro.props; // Extract master and teaching data from props

// Render the content of the teaching (e.g., markdown or MDX content)
const { Content } = await render(teaching);
---

<BaseLayout title={teaching.data.name}>
  <section>
    <header class="title-header">
      <h2>
        {teaching.data.name}
        <span class="faded">by {master.data.stage_name}</span>
      </h2>
      <div><a class="back" href={`/${master.id}`}>Back to master</a></div>
    </header>
    <Separator />
    <div class="content-wrap">
      <img
        class="image fade-in"
        src={teaching.data.image.src}
        alt={teaching.data.image.alt}
      />
      <div class="content">
        <h3>Track List</h3>
        <ol>
          {teaching.data.tracks.map((track) => <li>{track}</li>)}
        </ol>
        <Content />
      </div>
    </div>
  </section>
</BaseLayout>

---
import Layout from '../../layouts/Layout.astro';
import "@/styles/tag.css";

export async function getStaticPaths() {
  const allTags = new Set<string>();

  // Blog posts
  const postsBlogGlobMd = import.meta.glob('../content/blogs/*.md', { eager: true });
  const postsBlogGlobMdx = import.meta.glob('../content/blogs/*.mdx', { eager: true });
  const allBlogPosts = [
    ...Object.values(postsBlogGlobMd),
    ...Object.values(postsBlogGlobMdx),
  ] as any[];
  allBlogPosts.forEach((post: any) => {
    if (post.frontmatter.tags) {
      post.frontmatter.tags.forEach((tag: string) => {
        allTags.add(tag);
      });
    }

    post.frontmatter.group = "blogs";
  });

// Interpretation posts
  const postsInterpretationGlobMd = import.meta.glob('../content/interpretations/*.md', { eager: true });
  const postsInterpretationGlobMdx = import.meta.glob('../content/interpretations/*.mdx', { eager: true });
  const allInterpretationPosts = [
    ...Object.values(postsInterpretationGlobMd),
    ...Object.values(postsInterpretationGlobMdx),
  ] as any[];
  allInterpretationPosts.forEach((post: any) => {
    if (post.frontmatter.tags) {
      post.frontmatter.tags.forEach((tag: string) => {
        allTags.add(tag);
      });
    }

    post.frontmatter.group = "interpretations";
  });

// Koan posts
  const postsKoanGlobMd = import.meta.glob('../content/koans/*.md', { eager: true });
  const postsKoanGlobMdx = import.meta.glob('../content/koans/*.mdx', { eager: true });
  const allKoanPosts = [
    ...Object.values(postsKoanGlobMd),
    ...Object.values(postsKoanGlobMdx),
  ] as any[];
  allKoanPosts.forEach((post: any) => {
    if (post.frontmatter.tags) {
      post.frontmatter.tags.forEach((tag: string) => {
        allTags.add(tag);
      });
    }

    post.frontmatter.group = "koans";
  });

// Poem posts
  const postsPoemGlobMd = import.meta.glob('../content/poems/*.md', { eager: true });
  const postsPoemGlobMdx = import.meta.glob('../content/poems/*.mdx', { eager: true });
  const allPoemPosts = [
    ...Object.values(postsPoemGlobMd),
    ...Object.values(postsPoemGlobMdx),
  ] as any[];
  allPoemPosts.forEach((post: any) => {
    if (post.frontmatter.tags) {
      post.frontmatter.tags.forEach((tag: string) => {
        allTags.add(tag);
      });
    }

    post.frontmatter.group = "poems";
  });

// Sutra posts
  const postsSutraGlobMd = import.meta.glob('../content/sutras/*.md', { eager: true });
  const postsSutraGlobMdx = import.meta.glob('../content/sutras/*.mdx', { eager: true });
  const allSutraPosts = [
    ...Object.values(postsSutraGlobMd),
    ...Object.values(postsSutraGlobMdx),
  ] as any[];
  allSutraPosts.forEach((post: any) => {
    if (post.frontmatter.tags) {
      post.frontmatter.tags.forEach((tag: string) => {
        allTags.add(tag);
      });
    }

    post.frontmatter.group = "sutras";
  });

// Zongjinglu posts
  const postsZongjingluGlobMd = import.meta.glob('../content/zongjinglus/*.md', { eager: true });
  const postsZongjingluGlobMdx = import.meta.glob('../content/zongjinglus/*.mdx', { eager: true });
  const allZongjingluPosts = [
    ...Object.values(postsZongjingluGlobMd),
    ...Object.values(postsZongjingluGlobMdx),
  ] as any[];
  allZongjingluPosts.forEach((post: any) => {
    if (post.frontmatter.tags) {
      post.frontmatter.tags.forEach((tag: string) => {
        allTags.add(tag);
      });
    }

    post.frontmatter.group = "zongjinglus";
  });

// Create paths for each tag
  const allPosts = [
    ...allBlogPosts,
    ...allInterpretationPosts,
    ...allKoanPosts,
    ...allPoemPosts,
    ...allSutraPosts,
    ...allZongjingluPosts,
  ] as any[];

  return Array.from(allTags).map((tag: string) => {
    const tagSlug = tag.toLowerCase().replace(/[\/\s]+/g, '-');
    const postsInTag = allPosts.filter((post: any) =>
      post.frontmatter.tags && post.frontmatter.tags.includes(tag)
    ).sort((a: any, b: any) => new Date(b.frontmatter.date).getTime() - new Date(a.frontmatter.date).getTime());

    return {
      params: { tag: tagSlug },
      props: {
        tag,
        posts: postsInTag
      }
    };
  });
}

const { tag, posts } = Astro.props;
const base = import.meta.env.BASE_URL;
const title = "Tags";
const path = "tags";
const description = `Tất cả bài viết về ${tag}`;
---

<Layout title={tag} description={description}>
  <div class="tag-page">
    <header class="page-header">
      <h1 class="page-title">{tag}</h1>
      <p class="page-description">
        {posts.length} article{posts.length === 1 ? '' : 's'} in this tag
      </p>
      <hr class="page-rule" />
    </header>

    <div class="posts-list">
      {posts.map((post: any) => (
        <article class="post-item">
          <h2 class="post-title">
            <a href={`${base}${post.frontmatter.group}/${post.file.split('/').pop()?.replace('.md', '')}`}>
              {post.frontmatter.title}
            </a>
          </h2>

          <div class="post-meta">
            <time class="post-date" datetime={post.frontmatter.date}>
              {new Date(post.frontmatter.date).toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
              })}
            </time>
          </div>

          {post.frontmatter.excerpt && (
            <p class="post-excerpt">{post.frontmatter.excerpt}</p>
          )}

          <a href={`${base}${post.frontmatter.group}/${post.file.split('/').pop()?.replace('.md', '')}`} class="read-more">
            Read More →
          </a>
        </article>
      ))}
    </div>

    <div class="page-navigation">
      <a href={`${base}${path}`} class="back-link">← Xem Tất cả {title}</a>
    </div>
  </div>
</Layout>

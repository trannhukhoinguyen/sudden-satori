---
import { BLOG_CONFIG, EXTRA_BLOG_CONFIG, config } from "../../config.ts";
import Layout from '../../layouts/Layout.astro';
import "@/styles/postList.css";
import "@/styles/tagList.css";
import { getCategoryData } from "../../utils/getMarkdownContent";
import { calculateReadingTime, extractTextFromMarkdown } from '../../utils/reading-time';

const { category } = Astro.params;

const cfg = BLOG_CONFIG[category];
if (!cfg) throw new Error(`Category "${category}" not found in BLOG_CONFIG`);

const { title, path, description } = cfg;
const { pathTag, noPostDescription, noTagDescription } = EXTRA_BLOG_CONFIG;

// ✅ Gọi helper
const { posts: sortedPosts, tags: sortedTags } = getCategoryData(category);

const postsPerPage = 5;
const totalPages = Math.ceil(sortedPosts.length / postsPerPage);
const currentPage = 1;

const paginatedPosts = sortedPosts.slice(0, postsPerPage);
const base = import.meta.env.BASE_URL;
---

<Layout title={title} description={description}>
    <div class="blog-page">
        <header class="blog-header">
            <h1 class="blog-title">{title}</h1>
            <hr class="blog-rule" />
        </header>

        <!-- Tag list -->
        <div class="tags-page">
            <h3>Tất cả tag của {title}</h3>
            <div class="tags-grid">
                {sortedTags.map(([tag, posts]) => (
                        <div class="tag-card">
                            <a href={`/${pathTag}/${tag.toLowerCase().replace(/[\/\s]+/g, '-')}`} class="tag-link">
                                <h2 class="tag-title">{tag}</h2>
                                <p class="tag-count">{posts.length} bài</p>
                            </a>
                        </div>
                ))}
            </div>
            {sortedTags.length === 0 && <div class="no-tag"><p>{noTagDescription}</p></div>}
        </div>

        <!-- Post list -->
        {paginatedPosts.length > 0 ? (
                <div class="posts-list">
                    {paginatedPosts.map((post: any) => {
                        const rawContent = post.body || post.rawContent?.() || '';
                        const plainText = extractTextFromMarkdown(rawContent);
                        const readingTime = calculateReadingTime(plainText);
                        return (
                                <article class="post-item">
                                    <h2 class="post-title">
                                        <a href={`/${path}/${post.file.split('/').pop()?.replace(/\.(md|mdx)$/, '')}`}>
                                            {post.frontmatter.title}
                                        </a>
                                    </h2>
                                    <div class="post-meta">
                                        <time class="post-date" datetime={post.frontmatter.date}>
                                            {new Date(post.frontmatter.date).toLocaleDateString('en-US', {
                                                year: 'numeric',
                                                month: 'long',
                                                day: 'numeric'
                                            })}
                                        </time>
                                        <span class="post-reading-time">{readingTime}</span>
                                    </div>
                                    {post.frontmatter.excerpt && <p class="post-excerpt">{post.frontmatter.excerpt}</p>}
                                </article>
                        );
                    })}
                </div>
        ) : (
                <div class="no-post"><p>{ noPostDescription }</p></div>
        )}

        <!-- Pagination -->
        {totalPages > 1 && (
                <nav class="pagination">
                    {Array.from({ length: totalPages }).map((_, i) => {
                        const pageNum = i + 1;
                        return (
                                <a href={`/${path}/${pageNum}`} class={pageNum === currentPage ? 'active' : ''}>
                                    {pageNum}
                                </a>
                        );
                    })}
                </nav>
        )}
    </div>
</Layout>

<style>
    .pagination {
        display: flex;
        gap: 0.5rem;
        justify-content: center;
        margin-top: 2rem;
    }
    .pagination a {
        padding: 0.5rem 0.75rem;
        border: 1px solid #ccc;
        text-decoration: none;
        color: inherit;
    }
    .pagination a.active {
        background: #333;
        color: #fff;
    }
</style>

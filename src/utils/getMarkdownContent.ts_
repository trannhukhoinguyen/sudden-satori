const allCategories = new Set<string>();
const allTags = new Set<string>();
const categoryMap: Record<string, any[]> = {};
const tagMap: Record<string, any[]> = {};

// ===== 1. Khai báo glob cố định cho từng collection =====
const globMap = {
  blogs: import.meta.glob('../content/blogs/*.{md,mdx}', { eager: true }),
  books: import.meta.glob('../content/books/*.{md,mdx}', { eager: true }),
  interpretations: import.meta.glob('../content/interpretations/*.{md,mdx}', { eager: true }),
  koans: import.meta.glob('../content/koans/*.{md,mdx}', { eager: true }),
  poems: import.meta.glob('../content/poems/*.{md,mdx}', { eager: true }),
  practices: import.meta.glob('../content/practices/*.{md,mdx}', { eager: true }),
  sutras: import.meta.glob('../content/sutras/*.{md,mdx}', { eager: true }),
  zongjinglus: import.meta.glob('../content/zongjinglus/*.{md,mdx}', { eager: true }),
};

// ===== 2. Danh sách type mặc định cho mỗi collection =====
type CollectionName = keyof typeof globMap;

const collections: { name: CollectionName; type: string }[] = [
  { name: 'blogs', type: 'blog' },
  { name: 'books', type: 'book' },
  { name: 'interpretations', type: 'interpretation' },
  { name: 'koans', type: 'koan' },
  { name: 'poems', type: 'poem' },
  { name: 'practices', type: 'practice' },
  { name: 'sutras', type: 'sutra' },
  { name: 'zongjinglus', type: 'zongjinglu' },
];

// ===== 3. Hàm gán type mặc định =====
const addDefaultType = (posts: any[], defaultType: string) =>
    posts.map(post => ({
      ...post,
      frontmatter: {
        ...post.frontmatter,
        type: post.frontmatter?.type || defaultType,
      },
    }));

// ===== 4. Gom tất cả post từ mọi collection =====
const allPosts = collections.flatMap(({ name, type }) =>
  addDefaultType(Object.values(globMap[name]), type)
);
const recentPosts = allPosts
  .sort((a: any, b: any) => new Date(b.frontmatter.date).getTime() - new Date(a.frontmatter.date).getTime())
  .slice(0, 5);

const allPostsForSearchJson = [
  globMap['blogs'],
  globMap['books'],
  globMap['interpretations'],
  globMap['koans'],
  globMap['poems'],
  globMap['practices'],
  globMap['sutras'],
  globMap['zongjinglus'],
] as any[];

// Get all categories, tags
allPosts.forEach((post: any) => {
  if (post.frontmatter.categories) {
    post.frontmatter.categories.forEach((category: string) => {
      allCategories.add(category);
    });
  }
  if (post.frontmatter.tags) {
    post.frontmatter.tags.forEach((tag: string) => {
      allTags.add(tag);
    });
  }
});

// get sortedPosts, sortedCategories, sortedTags by type
const getSortedPostsByType = (type?: string) => {
  const filtered = type
      ? allPosts.filter(post => post.frontmatter.type === type)
      : allPosts;

  return filtered.sort(
      (a, b) =>
          new Date(b.frontmatter.date).getTime() -
          new Date(a.frontmatter.date).getTime()
  );
};
// Hàm chung để sort categories/tags theo type
const getSortedTermsByType = (
    termSet: Set<string>,
    termField: 'categories' | 'tags',
    type?: string
) => {
  const termMap: Record<string, any[]> = {};

  Array.from(termSet).forEach((term) => {
    termMap[term] = allPosts
        .filter((post) => !type || post.frontmatter.type === type)
        .filter(
            (post) =>
                Array.isArray(post.frontmatter[termField]) &&
                post.frontmatter[termField].includes(term)
        );
  });

  return Object.entries(termMap).sort((a, b) => {
    if (b[1].length !== a[1].length) {
      return b[1].length - a[1].length; // Sort theo số lượng bài
    }
    return a[0].localeCompare(b[0]); // Nếu bằng nhau thì sort theo tên
  });
};

// Dùng cho categories
const getSortedCategoriesByType = (type?: string) =>
    getSortedTermsByType(allCategories, 'categories', type);

// Dùng cho tags
const getSortedTagsByType = (type?: string) =>
    getSortedTermsByType(allTags, 'tags', type);

// Flat Categories & Tags for Sidebar
const flatCategories = [...new Set(allPosts.flatMap((post: any) => post.frontmatter.categories || []))];
const flatTags = [...new Set(allPosts.flatMap((post: any) => post.frontmatter.tags || []))];

// get all type of sortedPosts
const sortedPosts = getSortedPostsByType();
const sortedPostsBlog = getSortedPostsByType('blog');
const sortedPostsBook = getSortedPostsByType('book');
const sortedPostsInterpretation = getSortedPostsByType('interpretation');
const sortedPostsKoan = getSortedPostsByType('koan');
const sortedPostsPoem = getSortedPostsByType('poem');
const sortedPostsPractice = getSortedPostsByType('practice');
const sortedPostsSutra = getSortedPostsByType('sutra');
const sortedPostsZongjinglu = getSortedPostsByType('zongjinglu');

// get all type of sortedCategories
const sortedCategories = getSortedCategoriesByType();
const sortedCategoriesBlog = getSortedCategoriesByType('blog');
const sortedCategoriesBook = getSortedCategoriesByType('book');
const sortedCategoriesInterpretation = getSortedCategoriesByType('interpretation');
const sortedCategoriesKoan = getSortedCategoriesByType('koan');
const sortedCategoriesPoem = getSortedCategoriesByType('poem');
const sortedCategoriesPractice = getSortedCategoriesByType('practice');
const sortedCategoriesSutra = getSortedCategoriesByType('sutra');
const sortedCategoriesZongjinglu = getSortedCategoriesByType('zongjinglu');

// get all type of sortedTags
const sortedTags = getSortedTagsByType();
const sortedTagsBlog = getSortedTagsByType('blog');
const sortedTagsBook = getSortedTagsByType('book');
const sortedTagsInterpretation = getSortedTagsByType('interpretation');
const sortedTagsKoan = getSortedTagsByType('koan');
const sortedTagsPoem = getSortedTagsByType('poem');
const sortedTagsPractice = getSortedTagsByType('practice');
const sortedTagsSutra = getSortedTagsByType('sutra');
const sortedTagsZongjinglu = getSortedTagsByType('zongjinglu');

export {
  allPosts,
  allPostsForSearchJson,
  allCategories,
  allTags,

  recentPosts,

  sortedPosts,
  sortedPostsBlog,
  sortedPostsBook,
  sortedPostsInterpretation,
  sortedPostsKoan,
  sortedPostsPoem,
  sortedPostsPractice,
  sortedPostsSutra,
  sortedPostsZongjinglu,

  sortedCategories,
  sortedCategoriesBlog,
  sortedCategoriesBook,
  sortedCategoriesInterpretation,
  sortedCategoriesKoan,
  sortedCategoriesPoem,
  sortedCategoriesPractice,
  sortedCategoriesSutra,
  sortedCategoriesZongjinglu,

  sortedTags,
  sortedTagsBlog,
  sortedTagsBook,
  sortedTagsInterpretation,
  sortedTagsKoan,
  sortedTagsPoem,
  sortedTagsPractice,
  sortedTagsSutra,
  sortedTagsZongjinglu,

  flatCategories,
  flatTags,

  getSortedPostsByType,
  getSortedCategoriesByType,
  getSortedTagsByType,
};

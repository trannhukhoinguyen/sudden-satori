---
import '@fontsource/oswald/300.css';
import '@fontsource/oswald/400.css';
import '@fontsource/oswald/500.css';
import '@fontsource/oswald/600.css';
import '@fontsource/oswald/700.css';
import '@fontsource/roboto-condensed/300.css';
import '@fontsource/roboto-condensed/400.css';
import '@fontsource/roboto-condensed/700.css';
import '@fontsource/work-sans/400.css';
import '@fontsource/work-sans/500.css';
import '@fontsource/work-sans/600.css';
import '@fontsource/jetbrains-mono/400.css';
import '@fontsource/jetbrains-mono/700.css';
import '../styles/global.css';

import Header from '../components/page/Header.astro';
import Sidebar from '../components/page/Sidebar.astro';
import Footer from '../components/page/Footer.astro';
import SEO from '../components/page/SEO.astro';

import BackToTop from '../components/ui/BackToTop.astro';

import { SITE_TITLE, SITE_DESCRIPTION, SITE_URL } from '../config';

export interface Props {
  title: string;
  meta_title?: string;
  description?: string;
  excerpt?: string;
  showSidebar?: boolean;
  image?: string;
  type?: 'website' | 'article';
  publishedTime?: string;
  modifiedTime?: string;
  canonical?: string;
  collection?: string;
  schemaType?: string;
  wiki?: string;
}

const {
  title,
  meta_title,
  description,
  excerpt,
  showSidebar = true,
  image = '/images/backgrounds/thien-dinh-cua-Phat.jpg',
  type,
  publishedTime,
  modifiedTime,
  canonical,
  collection = null,
  wiki = [],
  schemaType = 'Article'
} = Astro.props;


const canonicalURL = canonical || new URL(Astro.url.pathname, SITE_URL || Astro.site).toString();
const imageURL = new URL(image, SITE_URL || Astro.site).toString();
const metaDescription = description || excerpt || SITE_DESCRIPTION;

// Schema cho Article hoặc WebPage
const articleSchema = schemaType === 'Article' ? {
  "@type": "Article",
  "headline": meta_title || title,
  "description": metaDescription,
  "image": [imageURL],
  "datePublished": publishedTime,
  ...(modifiedTime && { "dateModified": modifiedTime }),
  "author": {
    "@type": "Person",
    "name": "Tổ Sư Thiền"
  },
  "publisher": {
    "@type": "Organization",
    "name": SITE_TITLE,
    "logo": {
      "@type": "ImageObject",
      "url": new URL('/favicon.svg', SITE_URL || Astro.site).toString()
    }
  },
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": canonicalURL
  }
} : {
  "@type": "WebPage",
  "name": meta_title || title,
  "description": metaDescription,
  "url": canonicalURL
};

// Schema cho Organization (luôn hiển thị)
const orgSchema = {
  "@type": "Organization",
  "name": "Tổ Sư Thiền",
  "url": SITE_URL || 'https://tosuthien.org',
  "logo": new URL('/favicon.svg', SITE_URL || Astro.site).toString(),
  "sameAs": [
    "https://www.facebook.com/tosuthien2024/",
    "https://www.youtube.com/@tosuthien_org/playlists"
  ]
};

// Schema cho Person
const personSchema = {
  "@context": "https://schema.org",
  "@type": "Person",
  "name": meta_title || title,
  "alternateName": meta_title || title,
  "jobTitle": metaDescription,
  "image": [imageURL],
  "affiliation": {
    "@type": "Organization",
    "name": "Tổ Sư Thiền"
  },
  "sameAs": wiki,
};

// Breadcrumb schema
const breadcrumbSchema = {
  "@type": "BreadcrumbList",
  "itemListElement": [
    {
      "@type": "ListItem",
      "position": 1,
      "name": "Trang chủ",
      "item": SITE_URL || "https://tosuthien.org"
    },
    ...(collection ? [{
      "@type": "ListItem",
      "position": 2,
      "name": collection,
      "item": `${SITE_URL}/${collection}`
    }] : []),
    {
      "@type": "ListItem",
      "position": collection ? 3 : 2,
      "name": title,
      "item": canonicalURL
    }
  ]
};

// Gộp schema vào @graph
const schema = {
  "@context": "https://schema.org",
  "@graph": [
    orgSchema,
    articleSchema,
    personSchema,
    breadcrumbSchema
  ]
};
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />

    <script is:inline src="/theme-init.js"></script>

    <!-- JSON-LD Schema -->
    <script type="application/ld+json" set:html={JSON.stringify(schema)}></script>

    <SEO
      title={meta_title || title}
      description={description || excerpt}
      image={image}
      type={type}
      publishedTime={publishedTime}
      canonical={canonical}
    />
  </head>
  <body>
    <div class="site-wrapper">
    <Header />

    <main class="main-content" class:list={{ 'with-sidebar': showSidebar }}>
    <div class="content">
    <slot />
    </div>

    {showSidebar && (
        <aside class="sidebar">
        <Sidebar collection={collection} />
      </aside>
      )}
      </main>

      <BackToTop />
      <Footer />
      </div>
  </body>
</html>

<style>
  .site-wrapper {
    display: flex;
    flex-direction: column;
    min-height: 100vh;
  }

  .main-content {
    flex: 1;
    max-width: var(--max-width);
    margin: 0 auto;
    padding: 0 var(--content-padding);
    width: 100%;
  }

  .main-content.with-sidebar {
    display: grid;
    grid-template-columns: 1fr;
    gap: calc(var(--grid-unit) * 4);
  }

  .content {
    min-width: 0;
    padding: calc(var(--grid-unit) * 3) 0;
  }

  .sidebar {
    order: 2;
    padding-top: calc(var(--grid-unit) * 3);
  }

/* Desktop: 2 cột */
  @media (min-width: 1024px) {
    .main-content.with-sidebar {
      grid-template-columns: 3fr 1fr;
    }

    .sidebar {
      order: 2;
      padding-top: calc(var(--grid-unit) * 1);
    }
  }
</style>


